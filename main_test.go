package main

import (
	"log"
	"github.com/widaT/damogo/pb"
	"context"
	"google.golang.org/grpc"
	"fmt"
	"testing"
)

const (
	address     = "localhost:50051"
)
var feature =  []float32{-0.036254782, 0.0300498, -0.029762981, 0.041925687, 0.027605237, -0.03426578, -0.048352454, 0.033310708, -0.0335427, -0.047138255, 0.034200788, -0.0766761, -0.02406952, -0.015987182, -0.05789111, 0.03981, -0.062438164, -0.019488325, 0.0066041052, -0.018012257, -0.031004578, -0.042700544, -0.020868812, 0.030980315, -0.09374792, 0.045045163, -0.04090619, 0.033884443, -0.009366867, -0.094549306, -0.0016941666, 0.011982011, -0.019632652, -0.07778907, -0.02074431, -0.0521014, 0.0052810363, -0.07610414, 0.048396427, -0.08146787, -0.0007305735, -0.0011992673, 0.035753883, -0.0005720337, -0.0667081, -0.04276517, 0.11256981, 0.059328925, 0.005843815, 0.029821686, -0.08927275, -0.08457692, -0.02609876, -0.014291022, 0.017447654, 0.03652196, 0.020168737, -0.028833672, 0.040613443, 0.084470816, 0.07616124, 0.06269749, -0.03882538, -0.0070215897, -0.04063273, -0.04009859, 0.009894506, 0.011011825, -0.019898208, 0.004703855, 0.027991666, 0.01792422, -0.03038978, 0.026156358, 0.064983964, 0.061665636, 0.020456288, -0.018055756, 0.025258591, 0.03868947, -0.017014122, 0.013364514, 0.0014492639, -0.032963123, -0.03503453, 0.0110666035, -0.07558371, -0.026886746, -0.12362555, 0.05279138, -0.0024915023, 0.029894, -0.0223213, -0.050790634, 0.020890158, -0.015455279, -0.01272619, 0.013529425, -0.003943394, -0.02134486, -0.033340972, -0.0795118, -0.0058465092, 0.033277716, -0.013627622, 0.00693208, -0.08566104, -0.009131935, 0.003633368, 0.001671688, -0.0136520285, -0.056234937, -0.015906543, 0.0031121774, 0.003411817, -0.0074610002, 0.022537231, 0.0058602896, -0.06951212, -0.046678245, -0.023687292, 0.0073588705, 0.0417923, -0.022559736, -0.036256094, -0.099165544, 0.0013695889, 0.008862077, 0.05478748, 0.016521739, -0.047384966, -0.02709271, -0.019443002, 0.08256582, 0.040370468, -0.0026770055, 0.061081406, -0.004160268, 0.0169598, 0.078140706, 0.0016886131, -0.023164088, 0.042470913, 0.006858923, -0.05216257, 0.061685305, -0.033381697, -0.032680288, 0.0071396558, -0.010314561, -0.024579074, 0.0015544631, -0.043414738, -0.021086914, -0.03889101, 0.023605607, 0.063312635, -0.015886957, -0.056694817, 0.015735643, 0.0071011744, -0.020515475, 0.03892981, 0.016153118, 0.04595878, -0.02023238, -0.005928274, -0.0010867598, 0.02280932, -0.004008868, -0.005605204, 0.027724937, -0.040230177, -0.0074122944, -0.011266973, -0.032352645, -0.008076387, -0.059418775, 0.032368228, 0.018416744, -0.04163071, 0.008071374, -0.06546419, -0.029050635, -0.06575156, -0.0052672424, 0.09147238, 0.059959397, -0.054550085, -0.021295747, 0.014428603, -0.025300907, 0.050818253, -0.011294982, 0.092246816, -0.06582913, -0.032733746, -0.036921956, 0.03796783, -0.024226185, 0.0006432016, 0.078782655, 0.009591349, -0.014421879, -0.003178312, -0.023334188, 0.046244252, -0.011563704, 0.0018651437, 0.07796923, -0.015616386, 0.053449232, 0.06688421, 0.054345008, 0.06323113, -0.01719534, 0.070667125, -0.083744764, -0.06671643, 0.0365526, -0.008624032, 0.035837967, -0.040604755, -0.08518105, 0.077463165, -0.023628049, 0.019497696, 0.019314118, -0.0009082613, -0.051643036, 0.023036396, -0.0029709456, 0.04869527, 0.079762585, -0.0382109, 0.020567168, 0.015198045, -0.082904555, 0.030205768, -0.008896339, 0.0008888071, 0.01537847, 0.056930453, 0.051158916, 0.048890576, 0.022083705, -0.0003491131, 0.00415633, 0.0043393667, -0.003829597, 0.021750921, -0.011111593, -0.017564569, 0.055430625, -0.08339279, 0.028469421, 0.031049885, -0.05559143, 0.040186163, -0.042993553, 0.045113105, 0.08494817, 0.012306521, 0.0017716467, -0.056774322, 0.011916404, 0.022461312, -0.038699068, -0.01618734, -0.017140828, 0.01805201, -0.027355026, -0.028244205, 0.004346999, 0.013064904, -0.0404468, 0.025202941, -0.034958042, 0.06167412, -0.0490924, -0.015544722, -0.027529905, -0.057117227, -0.055153914, -0.046946667, -0.044755336, 0.0016678253, -0.019177886, -0.04299656, 0.043136485, 0.04156178, 0.028608212, 0.024247298, -0.013568805, -0.01926965, 0.09346406, 0.0072687417, -0.0068086246, 0.0010038805, -0.08401395, -0.08575071, 0.040304158, 0.02108769, 0.022787632, -0.009946766, -0.06611583, -0.057274543, -0.0132542, 0.04030317, -0.006937401, -0.055722125, -0.0047749574, 0.004758869, -0.005612757, -0.05300234, 0.0074217566, -0.02499834, -0.022584407, -0.039312426, 0.039039712, 0.026416728, -0.08845873, -0.002207512, -0.040340807, 0.023234975, -0.064782195, -0.046201687, 0.051387507, 0.017841654, 0.06869758, -0.039960336, -0.0032628048, -0.07884018, 0.0038642348, -0.022647044, -0.05801709, -0.017116915, 0.050588273, 0.17035963, -0.015511954, 0.001406768, -0.03406625, -0.079433054, 0.10010453, -0.033055488, -0.027722163, -0.010343355, -0.065947495, 0.0092080785, 0.082897305, 0.09083345, -0.079627864, -0.061485384, -0.00255014, 0.04775504, 0.040949684, -0.003401315, 0.07502329, 0.06629285, 0.06659134, -0.027400704, 0.06164739, 0.0008932625, 0.017482266, -0.08831956, -0.009974879, 0.0023678062, 0.025833644, 0.027081208, 0.03857747, 0.0413407, -0.032125387, 0.054717947, 0.0248152, -0.082814716, -0.002319119, -0.015116708, 0.015762374, 0.017380849, -0.00028301505, 0.012270958, -0.044166856, 0.0008042291, -0.0547065, -0.017925585, 0.030086206, 0.0011872614, -0.06806581, 0.06308695, 0.023382563, -0.05891973, 0.04558164, 0.024449456, -0.0050090277, 0.012603184, -0.011780961, 0.008277201, 0.024019293, 0.09296201, 0.047520254, 0.08107522, 0.044121493, 0.0008298852, 0.05644522, 0.0058245496, -0.038928065, -0.0034553404, 0.022149052, 0.06010984, 0.012369572, 0.035786368, 0.03239036, 0.070499815, -0.055260614, -0.029437857, 0.054450657, 0.0058208476, -0.1084968, 0.012100773, -0.050700605, -0.01218872, -0.04735723, -0.005594671, -0.058314897, 0.0028355715, 0.029147135, -0.048516087, 0.018708436, 0.046537638, 0.0856835, 0.03662565, 0.004093598, 0.04601547, 0.016416661, 0.07842252, 0.06295592, 0.053515855, 0.03475363, 0.08408362, -0.036155242, -0.06432591, -0.054131057, -0.043485932, -0.03688507, 0.057762057, 0.053715516, 0.052245196, 0.02479068, -0.092100546, -0.023044137, -0.037419997, 0.01632016, 0.032129597, -0.017977068, 0.023025773, 0.06311535, -0.047009986, -0.054837767, 0.005367042, -0.111448556, 0.044233847, 0.019154966, -0.07855203, 0.016378071, 0.07937026, -0.019006455, 0.04907992, 0.026019592, -0.09280004, 0.028770925, 0.025298614, 0.0038446188, -0.063919686, 0.077505104, -0.05828107, 0.05484029, 0.04652852, -0.027036348, -0.010201174, 0.027114956, 0.048512246, -0.014657409, 0.028139872, 0.041923117, -0.074899144, -0.052453775, -0.029478425, 0.0012054949, -0.06353277, -0.017214328, -0.073388085, 0.06106669, -0.009319801, -0.011258433, 0.005253612, 0.022437312, -0.023124892, -0.07251067, -0.028475802, -0.027963975, -0.027348064, -0.0402925, -0.011894462, -0.01850058, -0.011432013, -0.0035759604, 0.0073173437, -0.012210069, -0.013663328, -0.01057229, -0.027683707, 0.08442495}

var (
	conn *grpc.ClientConn
	err error
    c pb.FacedbClient
)
func init () {
	conn, err = grpc.Dial(address, grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	//defer conn.Close()
	c = pb.NewFacedbClient(conn)
}

func TestAddUsers(t *testing.T)  {
	for i:=0;i<1000000;i++ {
		_, err := c.AddUser(context.Background(),&pb.UserInfo{Group:"tesst",Id:fmt.Sprintf("widaddd_%d",i),Feature:feature})
		if err != nil {
			t.Fatalf("could not greet: %v", err)
		}
	}
}

func TestAddUser(t *testing.T)  {
	ret, err := c.AddUser(context.Background(),&pb.UserInfo{Group:"tesst",Id:"zidaddd139",Feature:feature})
	if err != nil {
		t.Fatalf("could not greet: %v", err)
	}
	fmt.Println(ret)
}

func TestGetUser(t *testing.T)  {
	dd,err := c.GetUser(context.Background(),&pb.UserInfo{Group:"tesst",Id:"widaddd"})
	if err != nil {
		t.Fatalf("could not greet: %v", err)
	}
	fmt.Printf("%#v",dd.Feature)
}

func TestSearchUser(t *testing.T)  {
	r, err := c.Search(context.Background(), &pb.SearchRequest{Group:"tesst",Feature:feature})
	if err != nil {
		t.Fatalf("could not ret: %v", err)
	}
	fmt.Println(r.Users)
}

func TestDelUser(t *testing.T)  {
	d,err:= c.DelUser(context.Background(),&pb.UserInfo{Group:"aaaaaaa",Id:"widaddd"})
	if err != nil {
		t.Fatalf("could not ret: %v", err)
	}
	fmt.Println(d)
}

func TestGroupList(t *testing.T)  {
	groups,err := c.GroupList(context.Background(),&pb.Null{})
	if err != nil {
		t.Fatalf("could not ret: %v", err)
	}
	fmt.Println(groups)
}

func TestUserList(t *testing.T)  {
	users,err := c.UserList(context.Background(),&pb.UserListReq{Group:"aaaaaaa",Skey:"",Num:10})
	if err != nil {
		t.Fatalf("could not ret: %v", err)
	}
	fmt.Println(users)
}

func TestDelGroup(t *testing.T)  {


	ret, err := c.AddUser(context.Background(),&pb.UserInfo{Group:"aaaaaaa111",Id:"widaddd",Feature:feature})
	if err != nil {
		t.Fatalf("could not greet: %v", err)
	}
	fmt.Println(ret)


	ret ,err = c.DelGroup(context.Background(),&pb.Group{"aaaaaaa111"})
	if err != nil {
		t.Fatalf("could not ret: %v", err)
	}
	fmt.Println(ret.Ret)


	dd,err := c.GetUser(context.Background(),&pb.UserInfo{Group:"aaaaaaa111",Id:"widaddd"})
	if err != nil {
		t.Fatalf("could not greet: %v", err)
	}
	if (dd.Feature !=nil) {
		t.Fatalf("err %s",dd.Group)
	}
}



func TestGroupSize(t *testing.T)  {
	size,err := c.GroupSize(context.Background(),&pb.Group{Group:"tesst"})
	if err != nil {
		t.Fatalf("could not ret: %v", err)
	}
	fmt.Println(size.Size)
}
