// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

/*
Package pb is a generated protocol buffer package.

protoc --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` search.proto
protoc --cpp_out=. search.proto
protoc --go_out=plugins=grpc:. search.proto

It is generated from these files:
	search.proto

It has these top-level messages:
	SizeReply
	Null
	Feature
	UserInfo
	NomalReply
	StringsReply
	Group
	UserListReq
	SearchRequest
	SearchReply
	InfoReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SizeReply struct {
	Size uint64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *SizeReply) Reset()                    { *m = SizeReply{} }
func (m *SizeReply) String() string            { return proto.CompactTextString(m) }
func (*SizeReply) ProtoMessage()               {}
func (*SizeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SizeReply) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Feature struct {
	Feature []float32 `protobuf:"fixed32,1,rep,packed,name=feature" json:"feature,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Feature) GetFeature() []float32 {
	if m != nil {
		return m.Feature
	}
	return nil
}

type UserInfo struct {
	Group   string    `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Id      string    `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Feature []float32 `protobuf:"fixed32,3,rep,packed,name=feature" json:"feature,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserInfo) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserInfo) GetFeature() []float32 {
	if m != nil {
		return m.Feature
	}
	return nil
}

type NomalReply struct {
	Ret bool `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (m *NomalReply) Reset()                    { *m = NomalReply{} }
func (m *NomalReply) String() string            { return proto.CompactTextString(m) }
func (*NomalReply) ProtoMessage()               {}
func (*NomalReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NomalReply) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

type StringsReply struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *StringsReply) Reset()                    { *m = StringsReply{} }
func (m *StringsReply) String() string            { return proto.CompactTextString(m) }
func (*StringsReply) ProtoMessage()               {}
func (*StringsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StringsReply) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Group struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Group) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type UserListReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Skey  string `protobuf:"bytes,2,opt,name=skey" json:"skey,omitempty"`
	Num   int32  `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
}

func (m *UserListReq) Reset()                    { *m = UserListReq{} }
func (m *UserListReq) String() string            { return proto.CompactTextString(m) }
func (*UserListReq) ProtoMessage()               {}
func (*UserListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserListReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UserListReq) GetSkey() string {
	if m != nil {
		return m.Skey
	}
	return ""
}

func (m *UserListReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SearchRequest struct {
	Group   string    `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Feature []float32 `protobuf:"fixed32,2,rep,packed,name=feature" json:"feature,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SearchRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *SearchRequest) GetFeature() []float32 {
	if m != nil {
		return m.Feature
	}
	return nil
}

type SearchReply struct {
	Users []*SearchReply_User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchReply) GetUsers() []*SearchReply_User {
	if m != nil {
		return m.Users
	}
	return nil
}

type SearchReply_User struct {
	Name     string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Distance float32 `protobuf:"fixed32,2,opt,name=distance" json:"distance,omitempty"`
}

func (m *SearchReply_User) Reset()                    { *m = SearchReply_User{} }
func (m *SearchReply_User) String() string            { return proto.CompactTextString(m) }
func (*SearchReply_User) ProtoMessage()               {}
func (*SearchReply_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *SearchReply_User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchReply_User) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type InfoReply struct {
	GroupsLen int32                  `protobuf:"varint,1,opt,name=GroupsLen" json:"GroupsLen,omitempty"`
	Groups    []*InfoReply_GroupInfo `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InfoReply) GetGroupsLen() int32 {
	if m != nil {
		return m.GroupsLen
	}
	return 0
}

func (m *InfoReply) GetGroups() []*InfoReply_GroupInfo {
	if m != nil {
		return m.Groups
	}
	return nil
}

type InfoReply_GroupInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Len  int32  `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (m *InfoReply_GroupInfo) Reset()                    { *m = InfoReply_GroupInfo{} }
func (m *InfoReply_GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*InfoReply_GroupInfo) ProtoMessage()               {}
func (*InfoReply_GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *InfoReply_GroupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoReply_GroupInfo) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func init() {
	proto.RegisterType((*SizeReply)(nil), "pb.SizeReply")
	proto.RegisterType((*Null)(nil), "pb.Null")
	proto.RegisterType((*Feature)(nil), "pb.Feature")
	proto.RegisterType((*UserInfo)(nil), "pb.UserInfo")
	proto.RegisterType((*NomalReply)(nil), "pb.NomalReply")
	proto.RegisterType((*StringsReply)(nil), "pb.StringsReply")
	proto.RegisterType((*Group)(nil), "pb.Group")
	proto.RegisterType((*UserListReq)(nil), "pb.UserListReq")
	proto.RegisterType((*SearchRequest)(nil), "pb.SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "pb.SearchReply")
	proto.RegisterType((*SearchReply_User)(nil), "pb.SearchReply.User")
	proto.RegisterType((*InfoReply)(nil), "pb.InfoReply")
	proto.RegisterType((*InfoReply_GroupInfo)(nil), "pb.InfoReply.GroupInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Facedb service

type FacedbClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	GroupList(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StringsReply, error)
	AddUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*NomalReply, error)
	GetUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	DelUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*NomalReply, error)
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*StringsReply, error)
	DelGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*NomalReply, error)
	GroupSize(ctx context.Context, in *Group, opts ...grpc.CallOption) (*SizeReply, error)
	Info(ctx context.Context, in *Null, opts ...grpc.CallOption) (*InfoReply, error)
}

type facedbClient struct {
	cc *grpc.ClientConn
}

func NewFacedbClient(cc *grpc.ClientConn) FacedbClient {
	return &facedbClient{cc}
}

func (c *facedbClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) GroupList(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StringsReply, error) {
	out := new(StringsReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/GroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) AddUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*NomalReply, error) {
	out := new(NomalReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) GetUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/pb.Facedb/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) DelUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*NomalReply, error) {
	out := new(NomalReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/DelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*StringsReply, error) {
	out := new(StringsReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/UserList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) DelGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*NomalReply, error) {
	out := new(NomalReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/DelGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) GroupSize(ctx context.Context, in *Group, opts ...grpc.CallOption) (*SizeReply, error) {
	out := new(SizeReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/GroupSize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facedbClient) Info(ctx context.Context, in *Null, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/pb.Facedb/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Facedb service

type FacedbServer interface {
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	GroupList(context.Context, *Null) (*StringsReply, error)
	AddUser(context.Context, *UserInfo) (*NomalReply, error)
	GetUser(context.Context, *UserInfo) (*UserInfo, error)
	DelUser(context.Context, *UserInfo) (*NomalReply, error)
	UserList(context.Context, *UserListReq) (*StringsReply, error)
	DelGroup(context.Context, *Group) (*NomalReply, error)
	GroupSize(context.Context, *Group) (*SizeReply, error)
	Info(context.Context, *Null) (*InfoReply, error)
}

func RegisterFacedbServer(s *grpc.Server, srv FacedbServer) {
	s.RegisterService(&_Facedb_serviceDesc, srv)
}

func _Facedb_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).GroupList(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).AddUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).GetUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).DelUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_DelGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).DelGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/DelGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).DelGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_GroupSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).GroupSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/GroupSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).GroupSize(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facedb_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacedbServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Facedb/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacedbServer).Info(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _Facedb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Facedb",
	HandlerType: (*FacedbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Facedb_Search_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _Facedb_GroupList_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Facedb_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Facedb_GetUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _Facedb_DelUser_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Facedb_UserList_Handler,
		},
		{
			MethodName: "DelGroup",
			Handler:    _Facedb_DelGroup_Handler,
		},
		{
			MethodName: "GroupSize",
			Handler:    _Facedb_GroupSize_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Facedb_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6a, 0xdb, 0x4c,
	0x10, 0x86, 0x6d, 0xfd, 0x59, 0x1a, 0xdb, 0x89, 0xbf, 0x25, 0x7c, 0x15, 0xa2, 0x3f, 0xee, 0x16,
	0x1a, 0xb7, 0x07, 0x0a, 0x75, 0xa1, 0xa7, 0xa5, 0x10, 0x12, 0x52, 0x42, 0x0e, 0xd6, 0xf4, 0x02,
	0x64, 0x6b, 0x92, 0x8a, 0xca, 0x92, 0xac, 0x95, 0x0a, 0xc9, 0x15, 0xf4, 0xa4, 0xf7, 0x5c, 0x76,
	0x56, 0x72, 0xe4, 0xa2, 0x40, 0xcf, 0x66, 0xb4, 0xef, 0xbe, 0xfb, 0xcc, 0xec, 0xac, 0x60, 0x22,
	0x31, 0x2a, 0x37, 0xdf, 0xc3, 0xa2, 0xcc, 0xab, 0x9c, 0x19, 0xc5, 0x9a, 0xbf, 0x02, 0x6f, 0x95,
	0x3c, 0xa0, 0xc0, 0x22, 0xbd, 0x67, 0x0c, 0x2c, 0x99, 0x3c, 0xa0, 0x3f, 0x9c, 0x0f, 0x17, 0x96,
	0xa0, 0x98, 0x3b, 0x60, 0xdd, 0xd4, 0x69, 0xca, 0xdf, 0xc0, 0xe8, 0x02, 0xa3, 0xaa, 0x2e, 0x91,
	0xf9, 0x30, 0xba, 0xd5, 0xa1, 0x3f, 0x9c, 0x9b, 0x0b, 0x43, 0xb4, 0x29, 0xff, 0x0a, 0xee, 0x37,
	0x89, 0xe5, 0x55, 0x76, 0x9b, 0xb3, 0x13, 0xb0, 0xef, 0xca, 0xbc, 0x2e, 0xc8, 0xcd, 0x13, 0x3a,
	0x61, 0x47, 0x60, 0x24, 0xb1, 0x6f, 0xd0, 0x27, 0x23, 0x89, 0xbb, 0x5e, 0xe6, 0xa1, 0xd7, 0x4b,
	0x80, 0x9b, 0x7c, 0x1b, 0xa5, 0x1a, 0x6d, 0x06, 0x66, 0x89, 0x15, 0x79, 0xb9, 0x42, 0x85, 0xfc,
	0x2d, 0x4c, 0x56, 0x55, 0x99, 0x64, 0x77, 0x52, 0x2b, 0xfe, 0x07, 0xe7, 0x67, 0x94, 0xd6, 0x28,
	0x09, 0xca, 0x13, 0x4d, 0xc6, 0x5f, 0x80, 0x7d, 0x49, 0x47, 0xf7, 0x02, 0xf1, 0x2b, 0x18, 0x2b,
	0xe4, 0xeb, 0x44, 0x56, 0x02, 0x77, 0x4f, 0x50, 0xab, 0xc6, 0xfc, 0xc0, 0xfb, 0x86, 0x9b, 0x62,
	0x45, 0x94, 0xd5, 0x5b, 0xdf, 0x9c, 0x0f, 0x17, 0xb6, 0x50, 0x21, 0xff, 0x0c, 0xd3, 0x15, 0xf5,
	0x57, 0xe0, 0xae, 0x46, 0x59, 0x3d, 0x61, 0xd6, 0x29, 0xd9, 0x38, 0x2c, 0x79, 0x07, 0xe3, 0xd6,
	0x40, 0x55, 0xf4, 0x1e, 0xec, 0x5a, 0x62, 0xa9, 0x0b, 0x1a, 0x2f, 0x4f, 0xc2, 0x62, 0x1d, 0x76,
	0xd6, 0x43, 0xc5, 0x2d, 0xb4, 0x24, 0xf8, 0x04, 0x96, 0x4a, 0x15, 0x69, 0x16, 0x6d, 0xb1, 0x39,
	0x91, 0x62, 0x16, 0x80, 0x1b, 0x27, 0xb2, 0x8a, 0xb2, 0x0d, 0x52, 0x05, 0x86, 0xd8, 0xe7, 0xfc,
	0xf7, 0x10, 0x3c, 0x75, 0x5d, 0xfa, 0xc4, 0xe7, 0xe0, 0x51, 0xaf, 0xe4, 0x35, 0x66, 0x64, 0x61,
	0x8b, 0xc7, 0x0f, 0xec, 0x0c, 0x1c, 0xaa, 0x40, 0x12, 0xf7, 0x78, 0xf9, 0x4c, 0x01, 0xed, 0x37,
	0x87, 0x24, 0xa4, 0xb4, 0x91, 0x05, 0x1f, 0x1a, 0x3b, 0x9a, 0x87, 0x3e, 0xb2, 0x19, 0x98, 0x29,
	0x66, 0x04, 0x65, 0x0b, 0x15, 0x2e, 0x7f, 0x99, 0xe0, 0x5c, 0x44, 0x1b, 0x8c, 0xd7, 0x2c, 0x04,
	0x47, 0x57, 0xcb, 0xfe, 0xeb, 0x56, 0x4e, 0xad, 0x0d, 0x8e, 0xff, 0x6a, 0x06, 0x1f, 0xb0, 0x77,
	0xcd, 0x69, 0xea, 0x2a, 0x99, 0xab, 0xd6, 0xd5, 0xe0, 0x06, 0x33, 0x52, 0x76, 0x26, 0x85, 0xa4,
	0xa3, 0x2f, 0x71, 0x4c, 0x0d, 0x9b, 0xa8, 0xe5, 0x76, 0x68, 0x83, 0x23, 0xda, 0xb6, 0x1f, 0x3b,
	0x3e, 0x60, 0xa7, 0x30, 0xba, 0xc4, 0xaa, 0x47, 0x7a, 0x90, 0x69, 0xcf, 0x73, 0x4c, 0xff, 0xc9,
	0xf3, 0x4c, 0x3f, 0x13, 0x02, 0x3d, 0x6e, 0xb5, 0xcd, 0x04, 0xf6, 0xf2, 0x9e, 0x82, 0x7b, 0x8e,
	0xa9, 0x1e, 0x63, 0x4f, 0xad, 0x53, 0xd8, 0x4b, 0xab, 0x7b, 0xa0, 0xde, 0x74, 0x57, 0x39, 0x25,
	0xd3, 0xf6, 0xa1, 0xf3, 0x01, 0x7b, 0x0d, 0x16, 0xdd, 0xca, 0x63, 0x9f, 0xa6, 0x07, 0xb7, 0xc9,
	0x07, 0x6b, 0x87, 0xfe, 0x12, 0x1f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xdd, 0x28, 0xc1,
	0x35, 0x04, 0x00, 0x00,
}
